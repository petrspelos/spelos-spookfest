#include "AmnesiaSignatures.cpp"

const string gAmbSoundFile = "CavernOfLostSouls.snt";

void OnStart()
{
    CandleBaitSetup();
    LanternBaitSetup();
    SlowDownAreasSetup();
    MorgueUnlockingSetup();
    PuzzleRoomSetup();
    HighHeelsPuzzleSetup();
    AddQuest("MissingParts", "MissingParts");

// |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
// XDJ5000 CODE
// |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

    PlayerEntityCollide("AreaLookAtItem", "CollidePlayerAreaLookAtItem", "EnterOnce");
    PlayerEntityCollide("AreaNotReadyMessage_1", "CollidePlayerAreaNotReadyMessage", "Enter");
    PlayerEntityCollide("AreaNotReadyMessage_2", "CollidePlayerAreaNotReadyMessage", "Enter");
    PlayerEntityCollide("AreaActiveBruteSurprise_1", "CollidePlayerAreaActiveBrute", "EnterOnce");
    PlayerEntityCollide("AreaInActiveBruteSurprise_1", "CollidePlayerAreaInActiveBrute", "EnterOnce");
    PlayerEntityCollide("AreaTriggerBruteSurprise_1", "CollidePlayerAreaTriggerBrute", "EnterOnce");
    PlayerEntityCollide("AreaShutDoor", "CollidePlayerAreaShutDoor", "EnterOnce");
    PlayerEntityCollide("AreaActiveBrute_1", "CollidePlayerAreaActiveBrute", "EnterOnce");
    PlayerEntityCollide("AreaBruteCheckCloset", "CollidePlayerAreaBruteCheckCloset", "EnterOnce");
    PlayerEntityCollide("AreaBruteChase", "CollidePlayerAreaBruteChase", "Enter");
    AddEntityCollideCallback("brute_1", "AreaTriggerBrute_1", "CollideBruteAreaTriggerBrute", true, 1);
    AddEntityCollideCallback("brute_1", "AreaCheckBrute", "CollideBruteAreaCheckBrute", false, 0);
    AddEntityCollideCallback("brute_checkpoint_1", "AreaCheckBrute", "CollideBruteAreaCheckBrute", false, 0);
    AddEntityCollideCallback("wine02_1", "AreaWineBrute", "CollideWineAreaWineBrute", false, 0);

    SetEntityCustomFocusCrossHair("AreaPickUpPart_1", "Pick");
    SetEntityCustomFocusCrossHair("AreaPickUpPart_2", "Pick");
    SetEntityCustomFocusCrossHair("AreaPickUpPart_3", "Pick");

    SetEntityActive("BoxNotReady_2", true);

    for(int i=1; i<=16; i++) PlayerEntityCollide("AreaSpikes_" + i, "CollidePlayerAreaSpikes", "Enter");
    AutoSave();
}

void OnEnter()
{
    Preload();
    PlaySoundAtEntity(
        "ambience",    /* Name */
        gAmbSoundFile, /* File */
        "Player",      /* Entity */
        0.5f,          /* Fade */
        false          /* Save */
    );

    SetSanityDrainDisabled(true);
    SetMapDisplayNameEntry("00_introduction");
}

void OnLeave()
{
    if(GetPlayerLampOil() < 10.0f) AddPlayerLampOil(10.0f);
    StopMusic(0.5f, 0);
}

// |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
// XDJ5000 CODE
// |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

void PickedUpPart(string entity)
{
    AddLocalVarInt("PartsTaken", 1);
    PlayGuiSound("pick_generic", 1.0f);
    if(entity == "AreaPickUpPart_1")
    {
        FadeLightTo("LightPart_1", 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f);
        SetEntityActive("item_part_1", false);
        SetEntityActive("BoxNotReady_1", false);
        SetEntityActive("AreaNotReadyMessage_1", false);
    }
    if(entity == "AreaPickUpPart_2")
    {
        FadeLightTo("LightPart_2", 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f);
        SetEntityActive("item_part_2", false);
    }
    if(entity == "AreaPickUpPart_3")
    {
        FadeLightTo("LightPart_3", 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f);
        SetEntityActive("item_part_3", false);
    }
    if(GetLocalVarInt("PartsTaken") == 3)
    {
        GiveSanityBoost();

        SetGlobalVarInt("HuntedForParts", 1);

        SetEntityActive("AreaBruteChase", true);
        SetEntityActive("BoxNotReady_2", false);
        SetEntityActive("AreaNotReadyMessage_2", false);

        CompleteQuest("MissingParts", "MissingParts");
        SetMessage("Messages", "GotAllParts", 0.0f);
    }
}

void CollidePlayerAreaNotReadyMessage(string parent, string child, int state)
{
    SetMessage("Messages", "StillMissingParts", 5.0f);
}

void CollidePlayerAreaLookAtItem(string parent, string child, int state)
{
    PlayerLook("item_part_1", "lookspeed", 2.5f, 2.5f);
    SetMessage("Messages", "OnePartFound", 5.0f);
}

void CheckPointSlowDownArea(string name, int count)
{
    PlayerEntityCollide("AreaActiveBruteSurprise_1", "CollidePlayerAreaActiveBrute", "EnterOnce");
    PlayerEntityCollide("AreaInActiveBruteSurprise_1", "CollidePlayerAreaInActiveBrute", "EnterOnce");
    PlayerEntityCollide("AreaTriggerBruteSurprise_1", "CollidePlayerAreaTriggerBrute", "EnterOnce");

    SetEnemyDisableTriggers("brute_surprise_1", true);

    SetPlayerActive(true);
    StopPlayerLookAt();
}

void CollidePlayerSlowDownArea(string &in asParent, string &in asChild, int alState)
{
    SetPlayerRunSpeedMul(0.0f);
}

void CollidePlayerSpeedUpArea(string parent, string child, int state)
{
    SetPlayerRunSpeedMul(1.0f);
}

void CollidePlayerAreaActiveBrute(string &in asParent, string &in asChild, int alState)
{
    if(asChild == "AreaActiveBruteSurprise_1")
    {
        PlayerReact("breath", RandFloat(1.0f, 2.0f));

        ClearEnemyPatrolNodes("brute_surprise_1");
        AddEnemyPatrolNode("brute_surprise_1", "PathNodeArea_1", 20.0f, "");
        SetEntityActive("brute_surprise_1", true);
    }
    else if(asChild == "AreaActiveBrute_1")
    {
        PlayerReact("pant", 1.0f);
        PlayerReact("breath_slow", 3.3f);
        PlayerReact("breath_slow", 5.5f);
        PlayerLook("torch_static01_1", "lookspeed", 3.0f, 5.0f);

        PlaySoundAtEntity("scarewhine", "scare_whine_loop1.snt", "Player", 2.0f, false);

        ClearEnemyPatrolNodes("brute_1");
        AddEnemyPatrolNode("brute_1", "PathNodeArea_2", 0.001f, "");
        AddEnemyPatrolNode("brute_1", "PathNodeArea_25", 0.001f, "");
        AddEnemyPatrolNode("brute_1", "PathNodeArea_26", 0.001f, "");
        AddEnemyPatrolNode("brute_1", "PathNodeArea_27", RandFloat(3.5f, 5.5f), "");
        AddEnemyPatrolNode("brute_1", "PathNodeArea_26", 0.001f, "");
        AddEnemyPatrolNode("brute_1", "PathNodeArea_25", 0.001f, "");
        AddEnemyPatrolNode("brute_1", "PathNodeArea_2", 0.001f, "");
        AddEnemyPatrolNode("brute_1", "PathNodeArea_36", RandFloat(2.5f, 4.5f), "");
        AddEnemyPatrolNode("brute_1", "PathNodeArea_38", RandFloat(2.5f, 4.5f), "");
        AddEnemyPatrolNode("brute_1", "PathNodeArea_36", 0.001f, "");
        AddEnemyPatrolNode("brute_1", "PathNodeArea_48", RandFloat(2.5f, 4.5f), "");
        AddEnemyPatrolNode("brute_1", "PathNodeArea_55", 0.001f, "");
        AddEnemyPatrolNode("brute_1", "PathNodeArea_56", 0.001f, "");
        AddEnemyPatrolNode("brute_1", "PathNodeArea_59", RandFloat(3.5f, 5.5f), "");
        AddEnemyPatrolNode("brute_1", "PathNodeArea_68", 0.001f, "");
        AddEnemyPatrolNode("brute_1", "PathNodeArea_69", 0.001f, "");
        AddEnemyPatrolNode("brute_1", "PathNodeArea_4", RandFloat(2.5f, 4.5f), "");
        SetEntityActive("brute_1", true);
    }
}

void CollidePlayerAreaInActiveBrute(string &in asParent, string &in asChild, int alState)
{
    if(asChild == "AreaInActiveBruteSurprise_1")
    {
        SetEntityActive("brute_surprise_1", false);
        SetEntityActive("AreaTriggerBruteSurprise_1", false);
        SetEntityActive("SpeedUpArea", true);

        SetLampLit("CorridorCandles", false, false);
        SetLightVisible("SpotLight_3", false);
    }
}

void LookAtDisappearBrute(string entity, int state)
{
    GiveSanityBoostSmall();
    PlayerReact("breath", 1.5f);
}

void CollidePlayerAreaTriggerBrute(string &in asParent, string &in asChild, int alState)
{
    if(asChild == "AreaTriggerBruteSurprise_1")
    {
        SetEnemyDisableTriggers("brute_surprise_1", false);
        SetPlayerActive(false);
        StartPlayerLookAt("brute_surprise_1", 3.0f, 3.0f, "");
    }
}

void CollidePlayerAreaShutDoor(string parent, string child, int state)
{
    PlayerLook("prison_7", "lookactive", 3.5f, 2.0f);
    PlayerReact("scare", 1.0f);
    PlayerReact("breath", 3.3f);
    AddTimer("prison_7", 1.0f, "TimerShutDoor");
    CreateParticleSystemAtEntity("PSDustPush", "ps_dust_push_15.ps", "AreaParticleDustPush", false);
    PlayGuiSound("scare_wind", 1.0f);
    CheckPoint ("CPSecondFloor", "PlayerStartArea_3", "CheckPointSecondFloor", "DeathHints", "DoNotLetHimCatchYou");

    SetLightVisible("LightStairs_1", false);
    for(int i=1; i<=6; i++) SetLampLit("lamp_stairs_" + i, false, true);
}

void CheckPointSecondFloor(string name, int count)
{
    ClearEnemyPatrolNodes("brute_checkpoint_1");
    AddEnemyPatrolNode("brute_checkpoint_1", "PathNodeArea_3", RandFloat(3.5f, 5.5f), "");
    AddEnemyPatrolNode("brute_checkpoint_1", "PathNodeArea_5", 2.001f, "");
    AddEnemyPatrolNode("brute_checkpoint_1", "PathNodeArea_4", 1.001f, "");
    AddEnemyPatrolNode("brute_checkpoint_1", "PathNodeArea_81", 0.001f, "");
    AddEnemyPatrolNode("brute_checkpoint_1", "PathNodeArea_59", RandFloat(2.5f, 4.5f), "");
    AddEnemyPatrolNode("brute_checkpoint_1", "PathNodeArea_56", 0.001f, "");
    AddEnemyPatrolNode("brute_checkpoint_1", "PathNodeArea_55", 0.001f, "");
    AddEnemyPatrolNode("brute_checkpoint_1", "PathNodeArea_48", 2.001f, "");
    AddEnemyPatrolNode("brute_checkpoint_1", "PathNodeArea_50", RandFloat(2.5f, 4.5f), "");
    AddEnemyPatrolNode("brute_checkpoint_1", "PathNodeArea_36", 2.001f, "");
    AddEnemyPatrolNode("brute_checkpoint_1", "PathNodeArea_38", RandFloat(2.5f, 4.5f), "");
    AddEnemyPatrolNode("brute_checkpoint_1", "PathNodeArea_36", 0.001f, "");
    AddEnemyPatrolNode("brute_checkpoint_1", "PathNodeArea_2", 0.001f, "");
    AddEnemyPatrolNode("brute_checkpoint_1", "PathNodeArea_23", 0.001f, "");
    AddEnemyPatrolNode("brute_checkpoint_1", "PathNodeArea_22", 0.001f, "");
    SetEntityActive("brute_checkpoint_1", true);

    ResetProp("prison_5");
    ResetProp("prison_7");
    ResetProp("prison_1");
    SetSwingDoorClosed("prison_1", true, false);

    SetLocalVarInt("BruteInsideArea", 0);

    StopMusic(0.0f, 1);
    PlayMusicRedux("12_amb.ogg", "AmbienceLoop");

    if(GetLocalVarInt("PartsTaken") == 3) SetEntityActive("AreaBruteChase", true);
}

void TimerShutDoor(string &in asTimer)
{
    if(asTimer == "prison_7")
    {
        ChangeDoorState(asTimer, "doorlock");

        PlayMusicRedux("12_amb.ogg", "AmbienceLoop");
    }
}

void CollidePlayerAreaSpikes(string &in asParent, string &in asChild, int alState)
{
    GivePlayerDamage(8.0f, "BloodSplat", true, true);
    PlayGuiSound("21_meat.snt", 1.0f);
    SetEntityActive(asChild, false);
    AddTimer(asChild, 10.0f, "TimerActiveEntity");
}

void CollideBruteAreaTriggerBrute(string &in asParent, string &in asChild, int alState)
{
    SetEnemyDisableTriggers("brute_1", false);

    StartScreenShake(0.3f, 0.1f, 0.5f, 0.0f);
    PlaySoundAtEntity("", "04_man_scream.snt", "AreaManScreamSound", 0.0f, false);
    PlayGuiSound("attack_claw_hit.snt", 0.5f);
	PlayGuiSound("15_bang_fall.snt", 1.0f);
    PlayGuiSound("15_ripp_door.snt", 1.0f);

    PlayerReact("scarebreatheffect", 1.0f);
}

void CollidePlayerAreaBruteCheckCloset(string &in asParent, string &in asChild, int alState)
{
    if(GetLocalVarInt("BruteInsideArea") == 0)
    {
        AlertEnemyOfPlayerPresence("brute_1");
        AlertEnemyOfPlayerPresence("brute_checkpoint_1");
    }
}

void CollideWineAreaWineBrute(string parent, string child, int state)
{
    if(state == -1)
    {
        PlayGuiSound("sounds/enemy/brute/amb_alert01.ogg", 1.0f);
        PlayerReact("scarebreatheffect", 0.5f);
        AlertEnemyOfPlayerPresence("brute_1");
        AlertEnemyOfPlayerPresence("brute_checkpoint_1");
    }
}

void CollidePlayerAreaBruteChase(string &in asParent, string &in asChild, int alState)
{
    if(GetLocalVarInt("BruteInsideArea") == 0)
    {
        SetEntityActive(asChild, false);
        PlayerLook("AreaTriggerBrute_1", "lookactive", 2.0f, 4.0f);
        PlayerReact("breath_slow", 0.5f);
        AddTimer("activebrutetrigger", 3.0f, "TimerChangeChaseBruteState");
        AddTimer("beginchase", 5.0f, "TimerChangeChaseBruteState");

        PlayMusicRedux("03_event_books.ogg", "Event");

        SetEntityActive("brute_1", false);
        SetEntityActive("brute_checkpoint_1", false);

        ClearEnemyPatrolNodes("brute_chase_1");
        AddEnemyPatrolNode("brute_chase_1", "PathNodeArea_4", 0, "");
        SetEntityActive("brute_chase_1", true);
    }
}

void TimerChangeChaseBruteState(string &in asTimer)
{
    if(asTimer == "activebrutetrigger") SetEnemyDisableTriggers("brute_chase_1", false);
    else if(asTimer == "beginchase")
    {
        ShowEnemyPlayerPosition("brute_chase_1");
        
        SetMessage("Messages", "Run", 5.0f);
    }
}

void CollideBruteAreaCheckBrute(string &in asParent, string &in asChild, int alState)
{
    if(alState == 1) SetLocalVarInt("BruteInsideArea", 1);
    else if(alState == -1) SetLocalVarInt("BruteInsideArea", 0);
}

void TimerFadeActiveEntity(string &in asTimer)
{
	SetPropActiveAndFade(asTimer, true, 2.0f);
}

void TimerFadeInActiveEntity(string &in asTimer)
{
	SetPropActiveAndFade(asTimer, false, 2.0f);
}

void TimerActiveEntity(string &in asTimer)
{
	SetEntityActive(asTimer, true);
}

void TimerInActiveEntity(string &in asTimer)
{
	SetEntityActive(asTimer, false);
}

void PlayMusicRedux(string &in asName, string &in asType)
{
	if(asType == "AmbienceLoop") PlayMusic(asName, true, 0.85f, 2.0f, 0, false);
	else if(asType == "EventLoop") PlayMusic(asName, true, 0.95f, 0.0f, 1, false);
	else if(asType == "Ambience") PlayMusic(asName, false, 0.85f, 2.0f, 0, false);
	else if(asType == "Event") PlayMusic(asName, false, 0.95f, 0.0f, 1, false);
	else PlayMusic(asName, true, 0.85f, 2.0f, 0, false);
}

void TimerStopMusic(string &in asTimer)
{
	if(asTimer == "Ambience") StopMusic(2.0f, 0);
	else if(asTimer == "Event") StopMusic(1.0f, 1);
	else
	{
		StopMusic(2.0f, 0);
		StopMusic(1.0f, 1);
	}
}

void PlayerEntityCollide(string &in asEntity, string &in asFunction, string &in asType)
{
	if(asType == "EnterOnce") AddEntityCollideCallback("Player", asEntity, asFunction, true, 1);
	else if(asType == "LeaveOnce") AddEntityCollideCallback("Player", asEntity, asFunction, true, -1);
	else if(asType == "BothOnce") AddEntityCollideCallback("Player", asEntity, asFunction, true, 0);
	else if(asType == "Enter") AddEntityCollideCallback("Player", asEntity, asFunction, false, 1);
	else if(asType == "Leave") AddEntityCollideCallback("Player", asEntity, asFunction, false, -1);
	else if(asType == "Both") AddEntityCollideCallback("Player", asEntity, asFunction, false, 0);
	else AddEntityCollideCallback("Player", asEntity, asFunction, true, 1);
}

void ChangeDoorState(string &in asEntity, string &in asType)
{
	if(asType == "doorlock" || asType == "doorclose")
	{
		PlaySoundAtEntity("SlamDoor", "scare_slam_door.snt", asEntity, 0, false);
		SetSwingDoorClosed(asEntity, true, true);
		StartScreenShake(0.01f, 1, 0.5f, 1);
		if(asType == "doorlock") SetSwingDoorLocked(asEntity, true, true);
	}	
	else if(asType == "doorexplode")
	{
		SetPropHealth(asEntity, 0);
		StartScreenShake(0.03f, 1, 0.5f, 1);
	}
	else if(asType == "dooropen" || asType == "dooropensilent" || asType == "dooropenunlock" || asType == "dooropenunlocksilent")
	{
		SetSwingDoorDisableAutoClose(asEntity, true);
		if(asType == "dooropen" || asType == "dooropenunlock")
		{
			PlaySoundAtEntity("OpenDoor", "01_door.snt", asEntity, 0, false);
			StartScreenShake(0.005f, 0.5f, 0.5f, 1);
			if(asType == "dooropenunlock")
			{
				SetSwingDoorLocked(asEntity, false, true);
				SetSwingDoorClosed(asEntity, false, true);
			}
		}
		else if(asType == "dooropenunlocksilent")
		{
			SetSwingDoorLocked(asEntity, false, true);
			SetSwingDoorClosed(asEntity, false, true);
		}
		AddTimer(asEntity, 0.1f, "TimerForceOpenDoor");
	}
}

void TimerForceOpenDoor(string &in asTimer)
{
	if(asTimer == "") AddPropForce(asTimer, 100.0f, 0, 0, "world");
	else if(asTimer == "") AddPropForce(asTimer, 0, 0, 100.0f, "world");
}

void UsedKeyOnDoor(string &in asItem, string &in asEntity)
{
	PlaySoundAtEntity("UnlockDoor", "unlock_door.snt", asEntity, 0, false);
	SetSwingDoorLocked(asEntity, false, false);
	SetLevelDoorLocked(asEntity, false);
}

void TimerFadeScreen(string &in asTimer)
{
	if(asTimer == "fadein")	FadeIn(2.0f);
	else if(asTimer == "fadeinslow")	FadeIn(5.0f);
	else if(asTimer == "fadeout") FadeOut(2.0f);
	else if(asTimer == "fadeoutslow") FadeOut(5.0f);
	else if(asTimer == "fadeinplayer")
	{
		FadeIn(2.0f);
		SetPlayerActive(true);
	}
	else if(asTimer == "fadeinslowplayer")
	{
		FadeIn(5.0f);
		SetPlayerActive(true);
	}
	else if(asTimer == "fadeoutplayer")
	{
		FadeOut(2.0f);
		SetPlayerActive(false);	
	}
	else if(asTimer == "fadeoutslowplayer")
	{
		FadeOut(5.0f);
		SetPlayerActive(false);	
	}
}

void TimerFadeGlobalSound(string &in asTimer)
{
	if(asTimer == "globalsoundon") FadeGlobalSoundVolume(1.0f, 4.0f);
	else if(asTimer == "globalsoundonquick") FadeGlobalSoundVolume(1.0f, 0.5f);
	else if(asTimer == "globalsoundoff") FadeGlobalSoundVolume(0.0f, 4.0f);
	else if(asTimer == "globalsoundoffquick") FadeGlobalSoundVolume(0.0f, 0.5f);
}

void PlayerMindBodyOil(float afSanity, float afHealth, float afLanternOil)
{
	SetPlayerSanity(afSanity);
	SetPlayerHealth(afHealth);
	SetPlayerLampOil(afLanternOil);
}

void PlayerGeneralState(string &in asType)
{
	if(asType == "normalspeed")
	{
		SetPlayerMoveSpeedMul(1.0f);
		SetPlayerRunSpeedMul(1.0f);
		SetPlayerLookSpeedMul(1.0f);
		SetPlayerJumpForceMul(1.0f);
		ShowPlayerCrossHairIcons(true);
	}
	else if(asType == "normaleffects")
	{
		FadeIn(2.0f);
		FadeImageTrailTo(0.0f, 2.0f);
		FadeSepiaColorTo(0.0f, 2.0f);
		FadeRadialBlurTo(0.0f, 2.0f);
		FadePlayerFOVMulTo(1, 2);
		FadePlayerAspectMulTo(1, 2);
		ShowPlayerCrossHairIcons(true);
	}
	else if(asType == "normaleverything")
	{
		FadeIn(2.0f);
		FadeImageTrailTo(0.0f, 2.0f);
		FadeSepiaColorTo(0.0f, 2.0f);
		FadeRadialBlurTo(0.0f, 2.0f);
		FadePlayerFOVMulTo(1, 2);
		FadePlayerAspectMulTo(1, 2);
		SetPlayerMoveSpeedMul(1.0f);
		SetPlayerRunSpeedMul(1.0f);
		SetPlayerLookSpeedMul(1.0f);
		SetPlayerJumpForceMul(1.0f);
		ShowPlayerCrossHairIcons(true);
	}
}

void PlayerSpeed(string &in asType)
{
	if(asType == "veryslow")
	{
		SetPlayerMoveSpeedMul(0.2f);
		SetPlayerRunSpeedMul(0.2f);
	}
	else if(asType == "slow")
	{
		SetPlayerMoveSpeedMul(0.9f);
		SetPlayerRunSpeedMul(0.9f);
	}
	else if(asType == "normal")
	{
		SetPlayerMoveSpeedMul(1.0f);
		SetPlayerRunSpeedMul(1.0f);
	}
}

void PlayerLook(string &in asEntity, string &in asType, float afSpeed, float afTime)
{
	StartPlayerLookAt(asEntity, afSpeed, afSpeed, "");
	if(asType == "lookspeed")
	{
		SetPlayerMoveSpeedMul(0.2f);
		SetPlayerRunSpeedMul(0.2f);
		SetPlayerLookSpeedMul(0.2f);
		SetPlayerJumpForceMul(0.2f);
		AddTimer(asType, afTime, "TimerStopLook");
	}
	else if(asType == "lookactive")
	{
		SetPlayerActive(false);
		ShowPlayerCrossHairIcons(false);
		AddTimer(asType, afTime, "TimerStopLook");
	}
	else if(asType == "lookzoom")
	{
		SetPlayerActive(false);
		ShowPlayerCrossHairIcons(false);
		FadePlayerFOVMulTo(0.7f, 2);
		FadePlayerAspectMulTo(0.7f, 2);
		AddTimer(asType, afTime, "TimerStopLook");
	}
	else AddTimer("", afTime, "TimerStopLook");
}

void TimerStopLook(string &in asTimer)
{
	StopPlayerLookAt();
	if(asTimer == "lookspeed")
	{
		SetPlayerMoveSpeedMul(1.0f);
		SetPlayerRunSpeedMul(1.0f);
		SetPlayerLookSpeedMul(1.0f);
		SetPlayerJumpForceMul(1.0f);
	}
	else if(asTimer == "lookactive")
	{
		SetPlayerActive(true);
		ShowPlayerCrossHairIcons(true);
	}
	else if(asTimer == "lookzoom")
	{
		SetPlayerActive(true);
		ShowPlayerCrossHairIcons(true);
		FadePlayerFOVMulTo(1, 2);
		FadePlayerAspectMulTo(1, 2);
	}
}

void PlayerReact(string &in asType, float afTime)
{
	AddTimer(asType, afTime, "TimerPlayerReactions");
	if(asType == "scarebreatheffect" || asType == "pantbreatheffect")
	{
		AddTimer("breatheffect", afTime + 3.0f, "TimerPlayerReactions");
		AddTimer("breatheffect", afTime + 6.0f, "TimerPlayerReactions");
	}
	else if(asType == "scarebreathsloweffect" || asType == "pantbreathsloweffect")
	{
		AddTimer("breathsloweffect", afTime + 3.0f, "TimerPlayerReactions");
		AddTimer("breathsloweffect", afTime + 6.0f, "TimerPlayerReactions");
	}
	else if(asType == "scaresigheffect" || asType == "pantsigheffect")
	{
		AddTimer("sigheffect", afTime + 3.0f, "TimerPlayerReactions");
		AddTimer("sigheffect", afTime + 6.0f, "TimerPlayerReactions");
	}
	else if(asType == "scarehighdamage" || asType == "panthighdamage" || asType == "scaremaxdamage" || asType == "pantmaxdamage")
	{
		AddTimer("breath_slow", afTime + 3.0f, "TimerPlayerReactions");
		AddTimer("breath_slow", afTime + 6.0f, "TimerPlayerReactions");
	}
}

void TimerPlayerReactions(string &in asTimer)
{
	if(asTimer == "scarebreatheffect" || asTimer == "scarebreathsloweffect" || asTimer == "scaresigheffect")
	{
		PlayGuiSound("react_scare", 0.7f);
		FadeSepiaColorTo(0.5f, 0.025f);
		FadeRadialBlurTo(0.1f, 0.025f);
		SetRadialBlurStartDist(0.2f);
		GiveSanityDamage(RandFloat(10.0f, 20.0f), false);
	}
	else if(asTimer == "breatheffect")
	{
		PlayGuiSound("react_breath", 0.5f);
		FadeSepiaColorTo(0, 0.1f);
		FadeRadialBlurTo(0, 0.1f);
	}
	else if(asTimer == "breathsloweffect")
	{
		PlayGuiSound("react_breath_slow", 0.5f);
		FadeSepiaColorTo(0, 0.1f);
		FadeRadialBlurTo(0, 0.1f);
	}
	else if(asTimer == "sigheffect")
	{
		PlayGuiSound("react_sigh", 0.5f);
		FadeSepiaColorTo(0, 0.1f);
		FadeRadialBlurTo(0, 0.1f);
	}
	else if(asTimer == "pantbreatheffect" || asTimer == "pantbreathsloweffect" || asTimer == "pantsigheffect")
	{
		PlayGuiSound("react_pant", 0.7f);
		FadeSepiaColorTo(0.5f, 0.025f);
		FadeRadialBlurTo(0.1f, 0.025f);
		SetRadialBlurStartDist(0.2f);
		GiveSanityDamage(RandFloat(10.0f, 20.0f), false);
	}
	else if(asTimer == "scare")
	{
		PlayGuiSound("react_scare", 0.7f);
		GiveSanityDamage(RandFloat(5.0f, 10.0f), true);
	}
	else if(asTimer == "breath")
	{
		PlayGuiSound("react_breath", 0.5f);
		GiveSanityDamage(RandFloat(2.5f, 5.0f), false);
	}
	else if(asTimer == "breath_slow")
	{
		PlayGuiSound("react_breath_slow", 0.5f);
		GiveSanityDamage(RandFloat(5.0f, 10.0f), false);
	}
	else if(asTimer == "sigh")
	{
		PlayGuiSound("react_sigh", 0.5f);
		GiveSanityDamage(RandFloat(2.5f, 5.0f), false);
	}
	else if(asTimer == "pant")
	{
		PlayGuiSound("react_pant", 0.7f);
		GiveSanityDamage(RandFloat(5.0f, 10.0f), true);
	}
	else if(asTimer == "scarehighdamage")
	{
		PlayGuiSound("react_scare", 0.9f);
		GiveSanityDamage(RandFloat(20.0f, 40.0f), true);
	}
	else if(asTimer == "panthighdamage")
	{
		PlayGuiSound("react_pant", 0.9f);
		GiveSanityDamage(RandFloat(20.0f, 40.0f), true);
	}
	else if(asTimer == "scaremaxdamage")
	{
		PlayGuiSound("react_scare", 0.9f);
		GiveSanityDamage(100.0f, true);
	}
	else if(asTimer == "pantmaxdamage")
	{
		PlayGuiSound("react_pant", 0.9f);
		GiveSanityDamage(100.0f, true);
	}
}

// ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| 
// SPELOS CODE
// |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
// -----------------------------------------------------------------------------
// Candle Bait
// -----------------------------------------------------------------------------
void CandleBaitSetup()
{
    AddEntityCollideCallback(
        "Player",              /* Parent */
        "CandleBait_Area",     /* Child */
        "OnCandleBaitCollide", /* Callback */
        true,                  /* Delete after collide */
        CollisionState::any    /* State */
    );
}

void OnCandleBaitCollide(string a, string b, int state)
{
    SetLampLit("CandleBait_Wall", false, true);
    AddTimer("CandleBait_Floor", 1.0f, "SetLampLitOn");
}

// -----------------------------------------------------------------------------
// Lantern Bait
// -----------------------------------------------------------------------------
void LanternBaitSetup()
{
    AddEntityCollideCallback(
        "Player",               /* Parent */
        "LanternBait_Area",     /* Child */
        "OnLanternBaitCollide", /* Callback */
        true,                   /* Delete after collide */
        CollisionState::any     /* State */
    );
}

void OnLanternBaitCollide(string a, string b, int state)
{
    PlaySoundAtEntity(
        "",                    /* Name */
        "ui_lantern_off.snt",  /* File */
        "LanternBait_Lantern", /* Entity */
        0.0f,                  /* Fade */
        false                  /* Save */
    );

    FadeLightTo(
        "LanternBait_Light", /* Light name */
        0.0f,  /* red */
        0.0f,  /* green */
        0.0f,  /* blue */
        1.0f,  /* alpha */
        -1.0f, /* radius -1 = no change */
        0.3f   /* fade length (sec) */
    );

    AddTimer("LanternBait_Lantern", 0.2f, "SetInactiveAndFadeQuick");
    AddTimer("", 1.2f, "LanternBaitWingSound");
    SetLampLit("CandleBait_Floor", false, true);
}

void LanternBaitWingSound(string timer)
{
    PlaySoundAtEntity(
        "",                  /* Name */
        "scare_wings.snt",   /* File */
        "LanternBait_Sound", /* Entity */
        0.0f,                /* Fade */
        false                /* Save */
    );
}

// -----------------------------------------------------------------------------
// Gate Interactions
// -----------------------------------------------------------------------------
void OnGateInteract(string entity)
{
    // Don't interact if the gate is open.
    if(GetLeverState("GateLever") == 1) return;

    // Don't continue if the player is currently
    // trying to lift the gate. (spam protect)
    if(GetTimerTimeLeft("LiftGateTimer") != 0) return;

    AddQuestIfNotAdded("OpenFirstGate");

    SetMoveObjectState("Gate", 0.05f);

    AddTimer("LiftGateTimer", 0.5f, "CloseGate");
}

void CloseGate(string t)
{
    SetMessage("Messages", "HeavyGate_" + RandInt(0, 3), 0.0f);
    SetMoveObjectState("Gate", 0.0f);
}

// -----------------------------------------------------------------------------
// Gate Opening
// -----------------------------------------------------------------------------
void GateLeverPulled(string entity, int state)
{
    if(state == 1)
    {
        SetLeverStuckState("GateLever", state, true);
        SetMoveObjectState("Gate", 1.0f);
        PlaySoundAtEntityForSeconds("move_gate.snt", "LanternBait_Sound", 3.0f);

        CompleteQuestIfAdded("OpenFirstGate");
        GiveSanityBoostSmall();

        StartScreenShake(
            0.005f, /* Amount */
            3.0f, /* Duration (sec.) */
            0.5f, /* FadeIn time (sec.) */
            0.5f  /* FadeOut time (sec.) */
        );

        AddTimer("", 0.2f, "StartCaveIn");
        BacktrackCaveInSetup();
    }
}

void StartCaveIn(string t)
{
    CheckPoint (
        "CaveInCheckPoint",  /* Name */
        "PlayerStartArea_2", /* Start position */
        "CheckPointSlowDownArea",                  /* Callback */
        "DeathHints",        /* Hint Category */
        "DoNotGetTooClose"            /* Hint Entry */
    );

    CreateEntityAtArea("CaveIn", "cave_in.ent", "CaveInSpawn", true);
    PlayRockSoundAtEntity("CaveIn");
    PlayRockSoundAtEntity("LeverSoundArea");
}

void PlayRockSoundAtEntity(string entity)
{
    PlaySoundAtEntity(
        "",                            /* Name */
        "29_rotating_rock_single.snt", /* File */
        entity,                        /* Entity */
        0.0f,                          /* Fade */
        false                          /* Save */
    );
}

// -----------------------------------------------------------------------------
// Backtrack CaveIn
// -----------------------------------------------------------------------------
void BacktrackCaveInSetup()
{
    AddEntityCollideCallback(
        "Player",                 /* Parent */
        "LanternBait_Area",       /* Child */
        "OnCaveInEffectsCollide", /* Callback */
        true,                     /* Delete after collide */
        CollisionState::any       /* State */
    );

    AddEntityCollideCallback(
        "Player",                 /* Parent */
        "CaveInCoughArea",        /* Child */
        "OnCaveInDustEnter",      /* Callback */
        true,                     /* Delete after collide */
        CollisionState::onlyEnter /* State */
    );
}

void OnCaveInEffectsCollide(string a, string b, int state)
{
    PlayRockSoundAtEntity("CaveIn");

    CreateParticleSystemAtEntity(
        "",                          /* Name */
        "ps_dust_elevator_crash.ps", /* File */
        "CaveInPSArea",              /* Entity */
        false                        /* Save */
    );

    AddTimer("", 0.5f, "PlayCaveInEffects");
}

void PlayCaveInEffects(string t)
{
    PlaySoundAtEntity(
        "",                         /* Name */
        "explosion_rock_large.snt", /* File */
        "CaveIn",                   /* Entity */
        0.0f,                       /* Fade */
        false                       /* Save */
    );

    StartScreenShake(
            0.2f, /* Amount */
            1.2f, /* Duration (sec.) */
            0.1f, /* FadeIn time (sec.) */
            0.7f  /* FadeOut time (sec.) */
        );

    GiveSanityDamage(10.0f, true);

    PlayMusic("05_event_steps.ogg", false, 1.0f, 0.0f, 1, false);
}

void OnCaveInDustEnter(string a, string b, int state)
{
    PlaySoundAtEntity(
        "",                 /* Name */
        "player_cough.snt", /* File */
        "Player",           /* Entity */
        0.0f,               /* Fade */
        false               /* Save */
    );
}

// -----------------------------------------------------------------------------
// Polaroid Pickup
// -----------------------------------------------------------------------------
void FirstPolaroidPickup(string e)
{
    PlayMusic("27_event_bang.ogg", false, 1.0f, 0.0f, 1, false);

    AddTimer("", 1.0f, "PlayFemaleSneakSound");
}

void PlayFemaleSneakSound(string t)
{
    PlaySoundAtEntity(
        "",                           /* Name */
        "step_sneak_female_rock.snt", /* File */
        "FemaleSneakSoundArea",       /* Entity */
        0.0f,                         /* Fade */
        false                         /* Save */
    );
}

// -----------------------------------------------------------------------------
// Slowdown Areas
// -----------------------------------------------------------------------------
void SlowDownAreasSetup()
{
    for(int i = 1; i <= 3; i++)
    {
        AddSlowDownAreaCallback($"SlowDownArea_{i}");
    }
}

void AddSlowDownAreaCallback(string name)
{
    AddEntityCollideCallback(
        "Player",                /* Parent */
        name,                    /* Child */
        "OnSlowdownAreaCollide", /* Callback */
        false,                   /* Delete after collide */
        CollisionState::any      /* State */
    );
}

void OnSlowdownAreaCollide(string a, string b, int state)
{
    if(state == CollisionState::onlyEnter)
    {
        SetPlayerJumpDisabled(true);
        SetPlayerRunSpeedMul(0.2f);
        SetPlayerMoveSpeedMul(0.4f);
    }
    else if(state == CollisionState::onlyLeave)
    {
        SetPlayerJumpDisabled(false);
        SetPlayerRunSpeedMul(1.0f);
        SetPlayerMoveSpeedMul(1.0f);
    }
}

// -----------------------------------------------------------------------------
// Morgue Unlocking
// -----------------------------------------------------------------------------
void OnMorgueDoorInteract(string entity)
{
    // Return if the door is unlocked.
    if(!GetSwingDoorLocked(entity)) return;

    AddQuestIfNotAdded("LockedMorgue");

    SetMessage("Messages", "MorgueDoorLockedInspect_" + RandInt(0, 2), 0.0f);
}

void OnMorguePadlockInteract(string entity)
{
    // Return if the door is unlocked.
    if(!GetSwingDoorLocked(entity)) return;

    AddQuestIfNotAdded("LockedMorgue");

    SetMessage("Messages", "MorguePadlockInspect_" + RandInt(0, 2), 0.0f);
}

void MorgueUnlockingSetup()
{
    AddUseItemCallback(
        "",                      /* Name */
        "PadlockKey",            /* Item */
        "MorguePadlockDoor",     /* Entity */
        "OnMorguePadlockUnlock", /* Callback */
        true                     /* Auto-Destroy */
    );

    AddUseItemCallback(
        "",                      /* Name */
        "PadlockKey",            /* Item */
        "MorguePadlock",         /* Entity */
        "OnMorguePadlockUnlock", /* Callback */
        true                     /* Auto-Destroy */
    );
}

void OnMorguePadlockUnlock(string item, string entity)
{
    CompleteQuestIfAdded("LockedMorgue");

    RemoveItem(item);
    SetSwingDoorLocked("MorguePadlockDoor", false, false);

    ReplaceEntity(
        "MorguePadlock",       /* Entity Name */
        "",                    /* Body */
        "MorguePadlockBroken", /* New Entity Name */
        "padlock_broken.ent",  /* New Entity File */
        true                   /* Full game save */
    );

    PlaySoundAtEntity(
        "",                      /* Name */
        "door_sewer_unlock.snt", /* File */
        "MorguePadlockDoor",     /* Entity */
        0.0f,                    /* Fade */
        false                    /* Save */
    );
}

// -----------------------------------------------------------------------------
// Backtrack candle blow out
// -----------------------------------------------------------------------------
void PuzzleRoomSetup()
{
    AddEntityCollideCallback(
        "Player",            /* Parent */
        "PuzzleRoomArea",    /* Child */
        "OnPuzzleRoomEnter", /* Callback */
        true,                /* Delete after collide */
        CollisionState::any  /* State */
    );
}

void OnPuzzleRoomEnter(string a, string b, int state)
{
    AddTimer("CorridorCandles", 1.0f, "SetLampLitOff");
}

// -----------------------------------------------------------------------------
// High Heels puzzle
// -----------------------------------------------------------------------------
void HighHeelsPuzzleSetup()
{
    AddUseItemCallback(
        "",                        /* Name */
        "HighHeel",                /* Item */
        "HeelPedistalArea",        /* Entity */
        "PlaceHighHeelOnPedestal", /* Callback */
        true                       /* Auto-Destroy */
    );
}

void OnPadlockKeyPickup(string entity)
{
    AddQuestIfNotAdded("HeelsPuzzle");
    SetEntityActive("HeelPedistalArea", true);
}

void OnPedistalAreaInteract(string entity)
{
    if(GetLocalVarInt("HighHeelGateOpen") == 1)
    {
        SetMessage("Messages", "HeelPedestalInspectSolved_" + RandInt(0, 1), 0.0f);
        return;
    }

    SetMessage("Messages", "HeelPedestalInspect_" + RandInt(0, 2), 0.0f);
}

void OnStaticPedestalInteract(string entity)
{
    SetMessage("Messages", "StaticHeelPedestalInspect_" + RandInt(0, 2), 0.0f);
}

void PlaceHighHeelOnPedestal(string item, string entity)
{
    CompleteQuestIfAdded("HeelsPuzzle");
    RemoveItem(item);
    SetEntityActive("HighHeelStatic", true);
    SetLocalVarInt("HighHeelGateOpen", 1);
    GiveSanityBoostSmall();

    PlayMusic(
        "27_puzzle_passage.ogg", /* File */
        false,                   /* Loop */
        1.0f,                    /* Volume */
        0.0f,                    /* Fade time */
        1,                       /* Priority */
        false                    /* Resume */
    );

    PlaySoundAtEntity(
        "",                     /* Name */
        "puzzle_place_jar.snt", /* File */
        "HeelPedistalArea",     /* Entity */
        0.0f,                   /* Fade */
        false                   /* Save */
    );

    AddTimer("", 0.5f, "PlayPedestalRockSounds");
    AddTimer("HighHeelsGate", 1.5f, "OpenMoveObject");
}

void PlayPedestalRockSounds(string t)
{
    PlaySoundAtEntity(
        "",                            /* Name */
        "29_rotating_rock_single.snt", /* File */
        "HeelPedistalArea",            /* Entity */
        0.0f,                          /* Fade */
        false                          /* Save */
    );
}

// -----------------------------------------------------------------------------
// Pedestal Gate interactions
// -----------------------------------------------------------------------------
void OnPedestalGateInteract(string entity)
{
    // Don't interact if the gate is open.
    if(GetLocalVarInt("HighHeelGateOpen") == 1) return;

    // Don't continue if the player is currently
    // trying to lift the gate. (spam protect)
    if(GetTimerTimeLeft("LiftPedestalGateTimer") != 0) return;

    SetMoveObjectState("HighHeelsGate", 0.05f);

    AddTimer("LiftPedestalGateTimer", 0.5f, "ClosePedestalGate");
}

void ClosePedestalGate(string t)
{
    SetMessage("Messages", "HeavyGate_" + RandInt(0, 3), 0.0f);
    SetMoveObjectState("HighHeelsGate", 0.0f);
}

// -----------------------------------------------------------------------------
// Minor Events
// -----------------------------------------------------------------------------
void OnHeelPickup(string entity)
{
    SetEntityActive("CreepyChair", true);
    SetEntityActive("CreepyCandle", true);

    AddEntityCollideCallback(
        "Player",              /* Parent */
        "CreepyChairMoveArea", /* Child */
        "OnCreepyChairMove",   /* Callback */
        true,                  /* Delete after collide */
        CollisionState::any    /* State */
    );
}

void OnCreepyChairMove(string a, string b, int state)
{
    AddDebugMessage("Moved", false);
    SetLampLit("CreepyCandle", false, true);

    PlayerReact("breath", 0.7f);

    AddPropForce(
        "CreepyChair", /* entity */
        -400.0f,       /* X */
        0.0f,          /* Y */
        -750.0f,       /* Z */
        "world"        /* Coord system */
    );
}

// ----------------------------------------------------------------------------
// Quest abstractions
//
// Summary:
// A set of functions to abstract the quest system.
// ----------------------------------------------------------------------------
void AddQuestIfNotAdded(string quest)
{
    if(QuestIsAdded(quest)) return;
    AddQuest(quest, quest);
}

void CompleteQuestIfAdded(string quest)
{
    if(!QuestIsAdded(quest)) return;
    CompleteQuest(quest, quest);
}

// ----------------------------------------------------------------------------
// Play Looping Sound For Seconds
//
// Summary:
// Abstracts the task of having to play a looping sound at an entity only to
// create a function that stops it after a few seconds.
// ----------------------------------------------------------------------------
void PlaySoundAtEntityForSeconds(string soundFile, string entity, float seconds)
{
    string soundName = soundFile;

    PlaySoundAtEntity(
        soundName, /* Name */
        soundFile, /* File */
        entity,    /* Entity */
        0.5f,      /* Fade */
        false      /* Save */
    );

    AddTimer(soundName, seconds, "StopSoundTimer");
}

// ----------------------------------------------------------------------------
// Timer Wraps
//
// Summary:
// Timers wrapping a single function to allow for delayed calls.
// ----------------------------------------------------------------------------
void SetLampLitOn(string l) { SetLampLit(l, true, true); }

void SetLampLitOff(string l) { SetLampLit(l, false, true); }

void SetInactiveAndFadeQuick(string e) { SetPropActiveAndFade(e, false, 0.5f); }

void StopSoundTimer(string s) { StopSound(s, 0.5f); }

void OpenMoveObject(string o) { SetMoveObjectState(o, 1.0f); }

// ----------------------------------------------------------------------------
// COLLISION STATES
//
// Summary:
// An enum abstracting the Amnesia API magic ints in SetEntityCollideCallback.
// ----------------------------------------------------------------------------
enum CollisionState
{
    onlyEnter = 1,
    onlyLeave = -1,
    any = 0
}
